1. 항(피연산자)과 연산자
    1) 항(피연산자, operand) : 연산에 사용되는 값.
    2) 연산자(operator) : 항(피연산자)을 이용하여 연산하는 기호.

2. 대입 연산자(assignment operator)
    1) 변수에 다른 변수나 값을 대입하는 연산자
    2) 이항 연산자 중 우선순위가 가장 낮은 연산자.
    3) 왼쪽 변수 = 오른쪽 변수(값, 식) 

3. 산술 연산자
    - 사칙 연산자
        +   더하기
        -   빼기
        *   곱하기
        /   나누기(몫)
        %   나누기(나머지) : 숫자 n의 나머지 범위 : 0 ~ n-1

4. 복합 대입 연산자
    1) 장점 : 코드가 간결해짐.
    2) 대입 연사자와 다른 연산자가 함게 쓰임.
        a += b   :    a = a + b
        a -= b   :    a = a - b
        a *= b   :    a = a * b
        a /= b   :    a = a / b
        a %= b   :    a = a % b

        비트 단위 연산자
        a <<= b
        a >>= b
        a <<<= b

        논리
        a &= b
        a |= b
        a ^= b

5. 증감(증가,감소) 연산자
    1) 단항 연산자(항(피연산자)이 1개)
        +   부호 유지 (의미없음)
        -   부호 반전
        ++  항의 값에 1을더함
        --  항의 값에 1을 뺌
    2) 변수의 값을 1 더하거나 1 뺄때 사용
    3) 연산자가 항의 앞에 있는가, 뒤에있는가에 따라 결과가 달라짐
        val = ++x;      x값이 1 증가한 후 val 변수에 대입
        val = x++;      val 변수에 기존 x값 대입한 후 x값 1 증가
        val = --x;      x값이 1 감소한 후 val 변수에 대입
        val = x--;      val 변수에 기존 x값 대입한 후 x값 1 감소

6. 관계 연산자(비교 연산자)
    1) 이항 연산자
    2) 연산의 결과값이 true(참), false(거짓) 반환.
    3) 조건문, 반복문의 조건식에 사용
    4) 종류
        >
        >=
        <
        <=
        ==      두 개 항의 값이 같으면 참, 다르면 거짓 반환
        !=      두 개 항의 값이 다르면 참, 같으면 거짓

7. 논리 연산자
    1) 연산의 결과 : true, false로 반환
    2) 두 명제가 모두 참이면 논리곱은 참.
       두 명제 중 하나라도 참이면 논리합은 참.
       참의 부정은 거짓, 거짓의 부정은 참.
    3) 종류                 
        && (논리 곱, And)
        || (논리 합, Or)
        !  (부정, Not)

        A       B       A && B      A || B      !A
        true    true    true        true        false
        true    false   false       true        false
        false   true    false       true        true
        false   false   false       false       true
    4) SCE (Short Circuit Evaluation)
        - 최단 거리 평가
        - 연산의 효율 및 속도의 향상을 위해 불필요한 연산을 수행하지 않는 기능
            - 논리곱(&&)에서는 둘 다 참이어야 참이 되므로, 앞쪽이 거짓이면 뒤쪽 계산은 미수행함.
            - 논리합(||)에서는 둘 중 하나라도 참이면 참이 되므로, 앞쪽이 참이면 뒤쪽 계산 미수행함.
        - 논리 연산에서 모든 항이 실행되지 않는 경우

8. 조건 연산자
    1) 삼항 연산자
    2) 조건식 ? 결과1 : 결과2   ex) a>2 ? result1 : result2;
        - 조건식이 참이면 결과1, 조건식이 거짓이면 결과2 선택됨
    3) if(조건문)을 간단히 표현할 때 사용 가능.

9. 단항, 이항, 삼항 연산자

10. 연산자 우선순위 - 수업노트 Line 28