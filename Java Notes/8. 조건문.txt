1. 조건문
    1) 주어진 조건에 따라 다른 실행이 이루어지도록 구현
    2) if문, switch문

2. if문
    1) if문 문법
        if(조건식){
            수행문(실행 코드);      //조건식이 '참'인 경우에 수행문이 수행됨.
        }                          //조건식이 '참'인 아닌경우에 수행문이 수행되지 않음.
    2) if-else문 문법
        if(조건식){
            수행문1(실행 코드);      //조건식이 '참'인 경우에 수행문이 수행됨.
        }else{
            수행문2(실행 코드);      //조건식이 '거짓'인 경우에 수행문이 수행됨. 
        }
    3) if-else if-else문
        - 하나의 상황에 대한 조건식이 여러개로 나뉘고 각 조건에 다른 수행문이 이루어져야 할 경우 사용.
        - else if 절은 중간에 얼마든지 추가가능.
        - if-else if-else문 문법
        if(조건식){
            수행문1(실행 코드);      //조건식1이 '참'인 경우에 수행문이 수행된후 전체 조건문을 빠져나감.
        }else if(조건식2){
            수행문2(실행 코드);      //조건식1이 '거짓'이고, 조건식2가 '참'인 경우에 수행문이 수행된후 전체 조건문을 빠져나감.
        }else{
            수행문3(실행 코드);      //조건식1이 '거짓'이고, 조건식2도 '거짓'인 경우에 수행문이 수행된후 전체 조건문을 빠져나감.
        }
        수행문4(실행코드);

        - ex) 조건식2가 충족되면 수행문2를 실행한후 if문을 빠져나와 수행문4 수행함.

3. switch-case문
    1) 비교 조건이 특정 값이나 문자열인 경우 가독성이 좋게 구현됨.
    2) switch-case문 문법
        switch(조건문){
            case (비교값) :
                수행문1(실행 코드);
                break;    
            case (비교값2) :
                수행문2(실행 코드);
                break;
            ...
            default :
                수행문n(실행 코드);
        }
    3) break 문을 사용하여 각 조건이 만족되면 switch 블럭을 빠져나감. 의도적으로 break문을 생략하여 사용가능.
    4) JDK 14부터 지원되는 switch expression
        - 간단하게 쉼표(,)로 조건을 구분이 가능.
        - break문 대신 yield 키워드 사용
            - 반환값을 받을 수 있음.
    5) JDK 14이후 switch문 문법
        switch(조건문){
            case (비교값),(비교값2) -> {
                수행문1(실행 코드);
            }
            case (비교값3) -> {
                수행문3(실행 코드);
            }
            ...
            default :
                수행문n(실행 코드);
        }
    6) yield 사용시 문법
        int x = switch(조건문){
            case (비교값),(비교값2) -> {
                수행문1(실행 코드);
                yield x;
            }
            case (비교값3) -> {
                수행문3(실행 코드);
                yield y;
            }
            ...
            default -> {
                수행문n(실행 코드);
                yield 0;
            }
        };