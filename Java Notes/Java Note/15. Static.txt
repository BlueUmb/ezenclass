1. 스태틱(static)
    1) static변수, static메서드는 메서드 영역에 저장되며, 프로그램 시작전에 로드되고 프로그램 종료시 소멸
    2) 코드가 메서드 영역에 다 로딩된 후 그중에 static으로 지정된 변수와 메서드는 메서드 영역 내 static영역으로 옮겨짐.

2. static 변수
    1) 여러 인스턴스에서 공통으로 사용하는 변수가 필요한 경우
        - 여러 인스턴스가 공유하는 기준 값이 필요한 경우
            - 학생마다 새로운 학번 생성
            - 카드회사에서 카드 발급시 새로운 카드번호 부여
            - 회사 사원이 입사할때 새로운 사번이 필요한 경우
    2) 어떤 객체에서도 접근해서 사용할수 있음
        - 전역(global) 변수, 정적 변수
        - 클래스 변수, 정적 변수 ↔ 인스턴스 변수
        - 인스턴스 생성과 상관없이 사용 가능하므로 클래스이름으로 직접 참조 가능
    3) - static 변수는 프로그램이 메모리에 있는 동안 계속 영역을 차지하므로 너무 큰 메모리를 할당하는 것은 지양해야함.
       - 클래스 내부의 여러 메서드에서 사용하는 변수는 멤버 변수로 선언하는 것이 좋음.
            - 멤버 변수가 너무 많으면 인스턴스 생성시 쓸데없는 메모리가 할당됨
       - 상황에 적절하게 변수를 사용해야 함.

3. 프로그램에서 변수의 유형
    변수유형            선언위치            사용범위(cope)                    메모리                  생성과 소멸(Life Cycle)
    =============================================================================================================================================================
    지역변수            메서드 내부         메서드 내부                         stack                   메서드가 호출될 때 생성,
    (로컬변수)                                                                                         메서드가 끝나면 소멸
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    멤버변수            클래스 내부         클래스 내부,                        heap                    인스턴스가 생성될 때 힙에 생성, 
    (인스턴스 변수)                        private이 아니면 참조변수로                                  가비지 컬렉터(GC)가 메모리 수거할때 소멸 
                                          다른 클래스에서 접근가능
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    static 변수         클래스 내부         클래스 내부, private이 아니면        method area            프로그램이 처음 시작할 때 상수와 함께 데이터(메서드)영역에 생성,
    (클래스 변수)                           클래스이름으로 참조변수로                                   프로그램이 종료된후 메모리를 해제할 때 소멸
                                           다른 클래스에서 접근가능

4. 싱글톤 패턴(Singleton pattern)
    1) 의미
        - 클래스의 인스턴스는 오직 하나임을 보장하며, 이 인스턴스에 접근할 수 있는 방법을 제공하는 패턴
        - 프로그램에서 인스턴스가 단 한 개만 생성되어야 하는 경우 사용하는 디자인 패턴.
    2) static변수, 메서드를 활용하여 구현할 수 있음.
    3) 구현하기
        - 클래스에서 만들 수 있는 인스턴스가 오직 하나이고, 이에 접근을 어디에서든지 하나로만 통일하여 제공
        - 클래스 다이어그램으로 표시

        - 회사 객체 구현하기
            - 생성자는 private으로 선언
            - 클래스 내부에 유일한 private 인스턴스 생성
            - 외부에서 유일한 인스턴스를 참조할 수 있는 public 메소드 제공
            