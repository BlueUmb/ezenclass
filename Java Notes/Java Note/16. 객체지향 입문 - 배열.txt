0. 자료구조
    1) 대량 데이터를 효율적으로 관리하는 메커니즘
        - 우편번호
        - 인사지원부를 통한 인원 관리
        
1. 배열(Array)이란?
    1) 동일한 자료형의 순차적 자료구조
    2) 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간
    3) 자료를 순차적으로 한꺼번에 관리하는 방법
    4) 물리적 위치와 논리적 위치가 동일
    5) 배열의 순서는 0부터 시작
    6) 자바에서 구현한 ArrayList를 많이 활용함.

2. 배열 선언과 초기화  
    - 자료형[] (참조)변수명 = new 자료형[개수];
    - 자료형 (참조)변수명[] = new 자료형[개수];

3. 배열 사용하기
    1) [] 인덱스 연산자 활용
        - 배열 요소가 저장된 메모리의 위치를 연산하여 찾아줌.
    2) 배열의 길이와 요소의 개수는 동일하지 않을수 있음.
        - 배열을 선언하면 개수만큼 메모리가 할당됨.
        - 실제 요소(데이터)가 없는 경우도 있음
        - 배열의 length속성은 배열의 개수를 반환함. 요소의 개수와는 다름.
            - length 활용시 오류가 나는 경우.

4. 향상된 for문
    1) 배열의 n개 요소를 0부터 n-1까지 순차적으로 순회할 때 간단하게 사용할수 있음.
        for(변수 : 배열){

        }

5. 객체 배열 사용하기
    1) 객체 배열 선언과 구현
        - 기본 자료형 배열은 선언과 동시에 배열의 크기만큼 메모리가 할당됨
        - 객체 배열의 경우엔 요소가 되는 객체의 주소가 들어감(4바이트,8바이트) 메모리만 할당됨, 각 요소 객체는 생성하여 저장해야 함.
    2) 객체 배영 복사하기
        - arraycopy(Object src, int srcPos, Object dest, int dest, int length)
        - 사용법 - System.arraycopy(arr1(원본 배열), 0(원본 복사 시작위치), arr2(복사본 배열), 0(복사본 복사 시작위치), 5(복사본 복사 개수))
            - 얕은 복사
                - 객체 주소만 복사되어 한쪽 배열의 요소를 수정하면 같이 수정됨
                - 두 배열이 같은객체를 가리킴.
            - 깊은 복사
                - 각각의 객체를 생성한후 그 객체의 값을 복사하여 배열이 서로 다른 객체를 가리키도록함.

6. 배열 사용
    1) 메서드의 매개변수로 사용
    2) 메서드의 반환형으로 사용
    3) main() 메서드의 매개변수
        - JVM이 프로그램을 실행할 때 호출하는 메서드
        - 메서드를 호출해 인수를 넘겨주는 방식이 아님.

7. 배열 관련 유틸리티 메서드
    1) 배열의 초기화 메서드
        - Arrays.fill(초기화할 배열 명, 초기화할 값)
            - 두번째 매개변수로 전달된 값으로 배열초기화.
    2) 배열의 복사
        - Arrays.copyOf(원본 배열 명, 길이)
            - 원본배열을 첫번째 요소부터 두번째 매개변수 만큼 복사
        - Arrays.copyOfRange(원본 배열 명, 복사 시작 위치, 복사 종료 위치)
            - 원본배열을 첫번째 요소부터 두번째 매개변수부터 세번째 매개변수-1까지 복사
    3) 배열의 내용 정렬
        - Arrays.sort(배열명)
            - 배열을 오름차순으로 정렬

8. 2차원배열
    1) 다차원 배열
        - 이차원 이상으로 구현 된 배열
        - 평면(이차원 배열)이나 공간(삼차원 배열)을 활용
    2) 이차원 배열
        - int[][] arr = new int [2][3]

                               행개수  열개수
                                ---     ---
        - int[][] arr = new int [2]     [3]
          ---
          자료형

9. ArrayList
    1) 객체 배열을 구현한 클래스
    2) 기존의 배열 선언과 사용방식은 배열의 길이를 정하고 요소의 개수가 배열의 길이보다 커지면 배열을 재할당하고 복사했음.
        - 배열의 요소를 추가하거나 삭제하면 다른 요소들의 이동에 대한 구현을 했어야함.
    3) 객체 배열을 좀더 효율적으로 관리하기 위해 제공해 주는 클래스
    4) 주요 메서드
        ArrayList<자료형> arr = new ArrayList<>();
        - arr.add(E e)
            - 요소(데이터) 하나를 추가. E는 요소(데이터)의 자료형을 의미.
        - arr.size()
            - 배열에 추가된 요소(데이터) 전체 개수를 int형으로 반환.
        - arr.get(배열번호)
            - 배열의 매개변수 위치에 있는 요소(데이터)값을 반환함
        - arr.remove(배열번호)
            - 배열의 매개변수 위치에 있는 요소(데이터)값을 제거하고 그 값을 반환.
        - arr.isEmpty()
            - 배열이 비어 있는지 확인.
