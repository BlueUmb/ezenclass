1. 스트림 (Stream)
    1) data의 흐름
    2) 컬렉션(Collection) 형태로 구성된 데이터를 람다를 이용해 간결하고 직관적으로 프로세스하게 해줌
        - 배열,컬렉션을 대상으로 연산을 수행
        - 일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 함
    3) for, while등을 이용하던 기존loop()를 대체
    4) 손쉽게 병렬 처리를 할수 있게 해줌

2. 스트림 특진
    1) 한번 생성하고 사용한 스트림을 재사용을 할수 없음.
        - 자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소모됨
        - 다른 연산을 수행하기 위해서는 스트림을 다시 생성해야함
    2) 스트림 연산은 기존 자료를 변경하지않음
        - 자료에 대한 스트림을 생성하면 스트림이 사용하는 메모리공간은 
        별도로 생성되므로 연산이 수행되어도 기존자료에 대한 변경은 발행하지않음
    3) 스트림 연산은 중간 연산과 최종연산으로 구분 됨
        - 스트림에 대해 중간 연산은 여러 개의 적용될 수 있지만 최종 연산은 마지막에 한 번만 적용됨
        - 최종 연산이 호출되어야 중간 연산에 대한 수행이 이루어지고 그 결과가 만들어짐.
            - 지연 연산
            - 중간 연산에 대한 결과를 연산 중에 알수 없음.

3. 스트림 생성

4. 스트림 중간 연산, 최종 연산
    1) 중간 연산
        - filter(), map(), sorted()등
            - 조건에 맞는 요소를 추출(filter)하거나 요소를 변환함(map).
            - filter()
                - 만족하는 데이터만 걸러내는데 사용
            - map()
                - 데이터를 변형하는데 사용
                - 데이터의 해당 함수가 적용된 결과물을 제공하는 스트림을 리턴
            - sorted()
                - 데이터가 순서대로 정렬된 스트림을 리턴 (원본은 놔둔채 새로운 메모리에 저장)
    2) 최종 연산이 호출 될 때 중간 연산이 수행되고 결과가 생성됨.
    3) 중간 연산과 최종 연산에 대한 구현은 람다식을 활용
    4) 최종 연산
        - forEach(), count(), sum()등
    5) 스트림이 관리하는 자료를 하나씩 소모해가며 연산이 수행됨
    6) 최종 연산 후에 스트림은 더 이상 다른 연산을 적용할 수 없음
    7) 여러가지 중간 처릴ㄹ 이어붙이는 것이 가능
        - Soruce(컬렉션, 배열) => 중간처리 => 종결처리